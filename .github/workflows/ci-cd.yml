# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
# https://github.com/rhysd/actionlint

name: CICD

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

env:
  FEED_SOURCE: https://api.nuget.org/v3/index.json
  FEED_API_KEY: ${{ secrets.FEED_API_KEY }}
  NuGetDirectory: ${{ github.workspace}}/nuget

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      # https://github.com/joseftw/jos.enumeration/blob/main/.github/workflows/verify.yml
      # https://github.com/dotnet/Nerdbank.GitVersioning
      - uses: dotnet/nbgv@master
        id: nbgv

      - name: Cache NuGet Packages
        uses: actions/cache@v3
        with:
          key: vertical-template-nuget
          path: ~/.nuget/packages

      - name: Restore dependencies
        run: dotnet restore Vertical.Slice.Template.sln

      - name: Build Version ${{ steps.nbgv.outputs.nugetpackageversion }}
        run: dotnet build Vertical.Slice.Template.sln -c Release --no-restore

      - name: Test Version ${{ steps.nbgv.outputs.nugetpackageversion }}
        run: |
          dotnet test Vertical.Slice.Template.sln  -c Release --no-restore  --no-build

  # https://www.meziantou.net/publishing-a-nuget-package-following-best-practices-using-github.htm
  create_nuget:
    if: ${{ contains(fromJson('["main"]'), github.ref_name) ||  github.event_name == 'release' }}
    needs: build

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Cache NuGet Packages
        uses: actions/cache@v3
        with:
          key: vertical-template-nuget
          path: ~/.nuget/packages

      # https://github.com/joseftw/jos.enumeration/blob/main/.github/workflows/verify.yml
      # https://github.com/dotnet/Nerdbank.GitVersioning
      - uses: dotnet/nbgv@master
        id: nbgv

      - name: Restore dependencies
        run: dotnet restore Vertical.Slice.Template.sln

      - name: Build Version ${{ steps.nbgv.outputs.nugetpackageversion }}
        run: dotnet build  Vertical.Slice.Template.sln -c Release --no-restore /p:Version=${{ steps.nbgv.outputs.AssemblyVersion }}

      # https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-pack
      - name: Pack NuGet Package Version ${{ steps.nbgv.outputs.nugetpackageversion }}
        run: dotnet pack  Vertical.Slice.Template.sln --no-build --no-restore -c Release --output ${{ env.NuGetDirectory }}

        # Publish the NuGet package as an artifact, so they can be used in the following jobs
      - uses: actions/upload-artifact@v3
        with:
          name: nuget
          if-no-files-found: error
          retention-days: 7
          path: ${{ env.NuGetDirectory }}/*.nupkg

  validate_nuget:
    if: ${{ contains(fromJson('["main"]'), github.ref_name) ||  github.event_name == 'release' }}

    runs-on: ubuntu-latest
    needs: [create_nuget, build]
    steps:
      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET
        uses: actions/setup-dotnet@v3

      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v3
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      - name: Install nuget validator
        run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global

      # Validate metadata and content of the NuGet package
      # https://www.nuget.org/packages/Meziantou.Framework.NuGetPackageValidation.Tool#readme-body-tab
      # If some rules are not applicable, you can disable them
      # using the --excluded-rules or --excluded-rule-ids option
      - name: Validate package
        run: meziantou.validate-nuget-package (Get-ChildItem "${{ env.NuGetDirectory }}/*.nupkg")

  deploy:
    if: ${{ contains(fromJson('["main"]'), github.ref_name) ||  github.event_name == 'release' }}

    # Publish only when creating a GitHub Release
    # https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository
    # You can update this logic if you want to manage releases differently
    runs-on: ubuntu-latest
    needs: [validate_nuget, create_nuget]
    steps:
      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v3
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      # https://github.com/joseftw/jos.enumeration/blob/main/.github/workflows/verify.yml
      # https://github.com/dotnet/Nerdbank.GitVersioning
      - uses: dotnet/nbgv@master
        id: nbgv

      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      # https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-nuget-push
      - name: Publish NuGet Package Version ${{ steps.nbgv.outputs.nugetpackageversion }}
        run: dotnet nuget push ${{ env.NuGetDirectory }}/*.nupkg --skip-duplicate --source ${{ env.FEED_SOURCE }} --api-key ${{ env.FEED_API_KEY }}
